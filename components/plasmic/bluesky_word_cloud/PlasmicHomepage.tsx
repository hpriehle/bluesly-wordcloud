// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oQY9H6uAGQZoVphdgjJN56
// Component: blXVuJJ6PVWx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oQY9H6uAGQZoVphdgjJN56/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: blXVuJJ6PVWx/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: uQMz5V3FK0m4/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
  svg?: Flex__<"svg">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "cloudCreated",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "error",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return !$state.cloudCreated;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__ruC97)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g643X
                )}
              >
                {" "}
              </div>
            </section>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__hqKAe)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___3UDaa)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/bluesky_word_cloud/images/logoWordCloudPng.png",
                fullWidth: 500,
                fullHeight: 500,
                aspectRatio: undefined
              }}
            />

            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__hLzYp
              )}
            >
              {"Bluesky Word Cloud"}
            </h1>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ksz4)}>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.input),
                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["input", "value"],
                  AntdInput_Helpers
                ),
                placeholder: "Your Bluesky handle",
                value: generateStateValueProp($state, ["input", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"input"}
                  data-plasmic-override={overrides.input}
                  {...child$Props}
                />
              );
            })()}
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              disabled={false}
              onClick={async () => {
                const $steps = {};

                $steps["updateInputValue6"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["cloudCreated"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInputValue6"] != null &&
                  typeof $steps["updateInputValue6"] === "object" &&
                  typeof $steps["updateInputValue6"].then === "function"
                ) {
                  $steps["updateInputValue6"] = await $steps[
                    "updateInputValue6"
                  ];
                }

                $steps["updateInputValue5"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["error"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInputValue5"] != null &&
                  typeof $steps["updateInputValue5"] === "object" &&
                  typeof $steps["updateInputValue5"].then === "function"
                ) {
                  $steps["updateInputValue5"] = await $steps[
                    "updateInputValue5"
                  ];
                }

                $steps["updateInputValue2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInputValue2"] != null &&
                  typeof $steps["updateInputValue2"] === "object" &&
                  typeof $steps["updateInputValue2"].then === "function"
                ) {
                  $steps["updateInputValue2"] = await $steps[
                    "updateInputValue2"
                  ];
                }

                $steps["httpPost"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "94DwF4GLwVL8D9jt9sN8Dy",
                          opId: "0b184feb-0226-437f-85af-51d23106b317",
                          userArgs: {
                            body: [$state.input.value]
                          },
                          cacheKey: null,
                          invalidatedKeys: [],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["httpPost"] != null &&
                  typeof $steps["httpPost"] === "object" &&
                  typeof $steps["httpPost"].then === "function"
                ) {
                  $steps["httpPost"] = await $steps["httpPost"];
                }

                $steps["updateInputValue4"] =
                  $steps.httpPost.data.statusCode == 201
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["error"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateInputValue4"] != null &&
                  typeof $steps["updateInputValue4"] === "object" &&
                  typeof $steps["updateInputValue4"].then === "function"
                ) {
                  $steps["updateInputValue4"] = await $steps[
                    "updateInputValue4"
                  ];
                }

                $steps["updateInputValue3"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInputValue3"] != null &&
                  typeof $steps["updateInputValue3"] === "object" &&
                  typeof $steps["updateInputValue3"].then === "function"
                ) {
                  $steps["updateInputValue3"] = await $steps[
                    "updateInputValue3"
                  ];
                }

                $steps["updateCloudCreated"] =
                  $steps.httpPost.data.statusCode == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["cloudCreated"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateCloudCreated"] != null &&
                  typeof $steps["updateCloudCreated"] === "object" &&
                  typeof $steps["updateCloudCreated"].then === "function"
                ) {
                  $steps["updateCloudCreated"] = await $steps[
                    "updateCloudCreated"
                  ];
                }

                $steps["updateData"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["data"]
                        },
                        operation: 0,
                        value: $steps.httpPost.data.response
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateData"] != null &&
                  typeof $steps["updateData"] === "object" &&
                  typeof $steps["updateData"].then === "function"
                ) {
                  $steps["updateData"] = await $steps["updateData"];
                }

                $steps["updateInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["input", "value"]
                        },
                        operation: 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInputValue"] != null &&
                  typeof $steps["updateInputValue"] === "object" &&
                  typeof $steps["updateInputValue"].then === "function"
                ) {
                  $steps["updateInputValue"] = await $steps["updateInputValue"];
                }
              }}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tlMgJ
                )}
              >
                {"Create Word Cloud"}
              </div>
            </AntdButton>
          </div>
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__oKtB2)}>
              <IconIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </section>
          ) : null}
          {(() => {
            try {
              return !$state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__lgLaJ)}>
              {(() => {
                try {
                  return $state.cloudCreated;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__tldHv)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l5EdT)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cjAi3)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___8PVl2)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return $state.data.avatar;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        width={"75"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u146J)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mp5Aw
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.data.displayName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e0Tqh
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "@" + $state.data.handle;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.cloudCreated;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={(() => {
                    try {
                      return (() => {
                        const generateWordCloudHtml = text => {
                          return `
<!DOCTYPE html>
<html lang="en" style="margin:0; padding:0;">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Word Cloud Generator</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        .hidden {
            display: none !important;
        }
        .loading-container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1000;
        }
        .word-cloud-container {
            position: relative;
            width: 800px;
            height: 728px;
            margin: 0;
            padding: 0;
            background-color: white;
        }
        .button-container {
            width: 100%;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: white;
            padding: 0;
            margin-bottom: 0;
        }
        #wordCloudImage {
            margin-top: 0;
            padding: 0;
            display: block;
            background-color: white;
        }
        .share-button {
            background-color: #426AC6;
            color: white;
            padding: 6px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
            margin: 0;
        }
        .share-button:hover {
            background-color: #304065;
        }
    </style>
</head>
<body style="background-color: white;">
    <div class="word-cloud-container">
        <div class="button-container">
            <button id="downloadBtn" class="share-button hidden" onclick="downloadWordCloud()">Download to Share</button>
        </div>
        <div class="loading-container" id="loadingContainer">
            <img id="loadingImage" src="https://storage.googleapis.com/msgsndr/ihndYQ9btrQFwH0hiZ37/media/6747a8016b2c4819976e046e.gif" 
                width="75" height="75" alt="Loading..." aria-label="Loading Word Cloud" />
        </div>
        <img id="wordCloudImage" class="hidden" width="800" height="698" alt="Word Cloud" aria-label="Word Cloud Image" />
    </div>
    <script>
        function downloadWordCloud() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const image = document.getElementById('wordCloudImage');
            
            canvas.width = image.width;
            canvas.height = image.height;
            
            // Fill canvas with white background
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw image onto canvas
            ctx.drawImage(image, 0, 0);
            
            // Add watermark
            ctx.font = '14px Tahoma';
            ctx.fillStyle = '#000000';
            const watermark = '@blueskywordcloud.com';
            const metrics = ctx.measureText(watermark);
            const padding = 10;
            ctx.fillText(watermark, canvas.width - metrics.width - padding, canvas.height - padding);
            
            // Convert to JPG
            canvas.toBlob(function(blob) {
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.download = 'word-cloud.jpg';
                link.href = url;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);
            }, 'image/jpeg', 0.9);
        }

        fetch('https://textvis-word-cloud-v1.p.rapidapi.com/v1/textToCloud', {
            method: 'POST',
            headers: {
                'x-rapidapi-host': 'textvis-word-cloud-v1.p.rapidapi.com',
                'x-rapidapi-key': 'a537f249a7mshe6f4c7052c0423ep10ebebjsnd248602d7ca0',
                'content-type': 'application/json'
            },
            body: JSON.stringify({
                text: "${text}",
                scale: 1,
                width: 800,
                height: 698,
                colors: ['#426AC6', '#304065', '#0F172A', '#208BFE'],
                font: 'Tahoma',
                use_stopwords: true,
                language: 'en',
                uppercase: false,
                spacing: 10,
                padding: 0,
                margin: 0,
                background: '#FFFFFF'
            })
        })
        .then(response => response.text())
        .then(data => {
            const wordCloudImg = document.getElementById('wordCloudImage');
            wordCloudImg.src = data;
            wordCloudImg.classList.remove('hidden');
            document.getElementById('loadingContainer').classList.add('hidden');
            document.getElementById('downloadBtn').classList.remove('hidden');
        })
        .catch(error => {
            console.error('Error generating word cloud:', error);
            document.getElementById('loadingContainer').classList.add('hidden');
        });
    </script>
</body>
</html>
`;
                        };
                        const html = generateWordCloudHtml(
                          $state.data.cleanText
                        );
                        return html;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </section>
          ) : null}
          {(() => {
            try {
              return $state.error;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__syOsT
              )}
            >
              {"Handle not found. Please try again"}
            </div>
          ) : null}
          {(() => {
            try {
              return !$state.cloudCreated && !$state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__ua5Zd)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__xwhVg
                )}
              >
                {"Create a word cloud of your Bluesky posts!"}
              </h1>
              <div className={classNames(projectcss.all, sty.freeBox___2TqZ)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__vD582)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"219px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/bluesky_word_cloud/images/screenshot20241128At10740AmPng.png",
                    fullWidth: 498,
                    fullHeight: 174,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__wSs71)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"435px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/bluesky_word_cloud/images/screenshot20241128At10716AmPng.png",
                    fullWidth: 832,
                    fullHeight: 750,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "input", "button", "svg", "embedHtml"],
  input: ["input"],
  button: ["button"],
  svg: ["svg"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  input: typeof AntdInput;
  button: typeof AntdButton;
  svg: "svg";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oQY9H6uAGQZoVphdgjJN56"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Bluesky Word Cloud",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
